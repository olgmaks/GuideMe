package com.epam.gm.olgmaks.absractdao.crudoperation;

import com.epam.gm.olgmaks.absractdao.annotation.AutoGenerated;
import com.epam.gm.olgmaks.absractdao.annotation.Column;
import com.epam.gm.olgmaks.absractdao.general.AbstractDao;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Iterator;

public class SaveHelper<T> extends AbstractHelper<T> {

	//gryn - removing connection from construct, and adding to methods
    //public SaveHelper(Connection connection, Class<T> clazz) {
    //    super(connection, clazz);
    //}
    public SaveHelper(Class<T> clazz) {
        super(clazz);
    }
	

    
    //public PreparedStatement prepareSave(T t) throws IllegalArgumentException,
    //        IllegalAccessException {
    
    public PreparedStatement prepareSave(Connection connection, T t) throws IllegalArgumentException,
    IllegalAccessException {
    	
        init(t);

        sql = String.format(AbstractDao.INSERT, tableName, fieldNameSequence,
                unknownValues);
        try {
            preparedStatement = connection.prepareStatement(sql);

            Iterator<Object> fieldValueIterator = fieldValues.iterator();
            int columnIndex = 1;
            while (fieldValueIterator.hasNext()) {
                preparedStatement.setObject(columnIndex++,
                        fieldValueIterator.next());
            }

        } catch (SQLException e) {
            e.printStackTrace();
//            System.out.println("exception duringinserting " +sql);
        }
        System.out.println(sql);
        return preparedStatement;
    }

    private void init(T t) throws IllegalArgumentException,
            IllegalAccessException {
        unknownValues = new String();
        fieldNameSequence = new String();
        for (Field f : fields) {
            f.setAccessible(true);
            if (f.isAnnotationPresent(Column.class) && !f.isAnnotationPresent(AutoGenerated.class)) {
                String fieldName = f.getAnnotation(Column.class).value();
                Object fieldValue = f.get(t);
                System.out.println(fieldName + fieldValue);
                fieldNames.add(fieldName);
                fieldValues.add(fieldValue);
                unknownValues += "?,";
                fieldNameSequence += fieldName + ",";
            }

        }
        unknownValues = unknownValues.substring(0, unknownValues.length() - 1);
        System.out.println(unknownValues);
        fieldNameSequence = fieldNameSequence.substring(0,
                fieldNameSequence.length() - 1);
        System.out.println(fieldNameSequence);
    }

}
